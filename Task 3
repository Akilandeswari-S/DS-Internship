# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree  
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report  
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load the dataset
data = pd.read_csv('/content/bank-additional.csv', delimiter=';')

# Step 3: Explore the dataset
print(data.head())
print(data.info())
print(data.describe())

from operator import le
# Step 4: Data Cleaning and Preprocessing 
# Encode categorial columns using LabelEncoder 
categorical_cols = data.select_dtypes(include=['object']).columns
label_encoder = {}

for col in categorical_cols:
  le = LabelEncoder()
  data[col] = le.fit_transform(data[col])
  label_encoder[col] = le
    
# Separate features (X) and target (Y)
X = data.drop('y', axis=1)
Y = data['y']

# Normalize numerical columns 
scaler = StandardScaler()
X = pd.DataFrame (scaler.fit_transform(X), columns=X.columns)

# Step 5: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Step 6: Build the Decision Tree Classifier
clf = DecisionTreeClassifier(criterion='entropy', max_depth=5, random_state=42)
clf.fit(X_train, y_train)

# Step 7: Evaluate the model
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Step 8: Visualize the Decision Tree 
plt.figure(figsize=(15, 10))
class_names = data['y'].unique().astype(str)
plot_tree(clf, feature_names=X.columns, class_names=class_names, filled=True, rounded=True)
plt.title("Decision Tree Visualization")
plt.show()
